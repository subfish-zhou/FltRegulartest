import Mathlib.NumberTheory.Cyclotomic.Gal
import Mathlib.NumberTheory.NumberField.Units.Basic
import Mathlib.RingTheory.RootsOfUnity.PrimitiveRoots

universe u

open FiniteDimensional

open scoped NumberField

theorem PowerBasis.rat_hom_ext {S S' : Type _} [CommRing S] [hS : Algebra ‚Ñö S] [Ring S']
    [hS' : Algebra ‚Ñö S'] (pb : PowerBasis ‚Ñö S) ‚¶Éf g : S ‚Üí+* S'‚¶Ñ (h : f pb.gen = g pb.gen) : f = g :=
  let f' := f.toRatAlgHom
  let g' := g.toRatAlgHom
  DFunLike.ext f g <| by
    convert DFunLike.ext_iff.mp (pb.algHom_ext (show f' pb.gen = g' pb.gen from h))

variable (K : Type _) (p : ‚Ñï+) [Field K] [CharZero K] [IsCyclotomicExtension {p.val} ‚Ñö K]

variable {Œ∂ : K} (hŒ∂ : IsPrimitiveRoot Œ∂ p)

local notation "RR" => ùìû K

-- @Chris: you mentioned "checking automorphisms agree only on a generator" -
-- what you want is `power_basis.alg_hom_ext`
open scoped NumberField Cyclotomic

open IsCyclotomicExtension Polynomial

noncomputable section

/-- complex conjugation as a Galois automorphism -/
def galConj : K ‚âÉ‚Çê[‚Ñö] K :=
  (autEquivPow K (cyclotomic.irreducible_rat p.pos)).symm (-1)

variable {K p}

theorem ZMod.val_neg_one' : ‚àÄ {n : ‚Ñï}, 0 < n ‚Üí (-1 : ZMod n).val = n - 1
  | _ + 1, _ => ZMod.val_neg_one _

theorem galConj_zeta : galConj K p (zeta p ‚Ñö K) = (zeta p ‚Ñö K)‚Åª¬π :=
  by
  let hŒ∂ := zeta_spec p ‚Ñö K
  simp only [galConj, Units.coe_neg_one, autEquivPow_symm_apply, AlgEquiv.coe_algHom,
    PowerBasis.equivOfMinpoly_apply]
  convert (hŒ∂.powerBasis ‚Ñö).lift_gen (S' := K) _ _
  rw [IsPrimitiveRoot.powerBasis_gen, ZMod.val_neg_one' p.pos,
    pow_sub‚ÇÄ _ (hŒ∂.ne_zero p.ne_zero) p.pos, pow_one, hŒ∂.pow_eq_one, one_mul]

@[simp]
theorem galConj_zeta_runity (hŒ∂ : IsPrimitiveRoot Œ∂ p) : galConj K p Œ∂ = Œ∂‚Åª¬π :=
  by
  -- Use the fact that both Œ∂ and zeta p ‚Ñö K are primitive roots
  have hŒ∂_spec := zeta_spec p ‚Ñö K
  -- Both are primitive roots, so Œ∂ can be expressed as a power of the canonical primitive root
  obtain ‚ü®t, _ht, rfl‚ü© := hŒ∂_spec.eq_pow_of_pow_eq_one hŒ∂.pow_eq_one
  rw [map_pow, galConj_zeta, inv_pow]

theorem galConj_zeta_runity_pow (hŒ∂ : IsPrimitiveRoot Œ∂ p) (n : ‚Ñï) : galConj K p (Œ∂ ^ n) = Œ∂‚Åª¬π ^ n := by
  rw [map_pow, galConj_zeta_runity hŒ∂]

open scoped ComplexConjugate

theorem starRingEnd_norm_one (x : ‚ÑÇ) (h : norm x = 1) : starRingEnd ‚ÑÇ x = x‚Åª¬π := by
  rw [‚Üê Complex.norm_mul_exp_arg_mul_I x, h, Complex.ofReal_one, one_mul, ‚Üê Complex.exp_conj, ‚Üê
    Complex.exp_neg, map_mul, Complex.conj_I, mul_neg, Complex.conj_ofReal]

@[simp]
theorem embedding_conj (hŒ∂ : IsPrimitiveRoot Œ∂ p) (x : K) (œÜ : K ‚Üí+* ‚ÑÇ) : starRingEnd ‚ÑÇ (œÜ x) = œÜ (galConj K p x) := by
  change RingHom.comp (starRingEnd ‚ÑÇ) œÜ x = (œÜ.comp <| ‚Üë(galConj K p)) x
  revert x
  suffices œÜ (galConj K p Œ∂) = starRingEnd ‚ÑÇ (œÜ Œ∂)
    by
    rw [‚Üê DFunLike.ext_iff]
    apply (hŒ∂.powerBasis ‚Ñö).rat_hom_ext
    exact this.symm
  rw [starRingEnd_norm_one, galConj_zeta_runity hŒ∂, map_inv‚ÇÄ]
  exact Complex.norm_eq_one_of_pow_eq_one (by rw [‚Üê map_pow, hŒ∂.pow_eq_one, map_one]) p.ne_zero

variable (p)

--generalize this
theorem gal_map_mem {x : K} (hx : IsIntegral ‚Ñ§ x) (œÉ : K ‚Üí‚Çê[‚Ñö] K) : IsIntegral ‚Ñ§ (œÉ x) :=
  map_isIntegral_int (œÉ.restrictScalars ‚Ñ§) hx

theorem gal_map_mem_subtype (œÉ : K ‚Üí‚Çê[‚Ñö] K) (x : RR) : IsIntegral ‚Ñ§ (œÉ x) :=
  gal_map_mem x.2 _

/-- Restriction of `œÉ : K ‚Üí‚Çê[‚Ñö] K` to the ring of integers.  -/
def intGal (œÉ : K ‚Üí‚Çê[‚Ñö] K) : RR ‚Üí‚Çê[‚Ñ§] RR :=
  ((œÉ.restrictScalars ‚Ñ§).restrictDomain RR).codRestrict (integralClosure ‚Ñ§ K)
  (gal_map_mem_subtype œÉ)

@[simp]
theorem intGal_apply_coe (œÉ : K ‚Üí‚Çê[‚Ñö] K) (x : RR) : (intGal œÉ x : K) = œÉ x :=
  rfl

/-- Restriction of `œÉ : K ‚Üí‚Çê[‚Ñö] K` to the units of the ring of integers.  -/
def unitsGal (œÉ : K ‚Üí‚Çê[‚Ñö] K) : RRÀ£ ‚Üí* RRÀ£ :=
  Units.map <| intGal œÉ

variable (K)

/-- `unit_gal_conj` as a bundled hom. -/
def unitGalConj : RRÀ£ ‚Üí* RRÀ£ :=
  unitsGal (galConj K p)

theorem unitGalConj_spec (u : RRÀ£) : galConj K p u = unitGalConj K p u := rfl

variable {K}

theorem unit_lemma_val_one (u : RRÀ£) (œÜ : K ‚Üí+* ‚ÑÇ) :
    norm (œÜ (u * (unitGalConj K p u)‚Åª¬π)) = 1 := by
  rw [map_mul, IsAbsoluteValue.abv_mul norm, ‚Üê zpow_neg_one, NumberField.Units.coe_zpow,
    zpow_neg_one, map_inv‚ÇÄ, ‚Üê unitGalConj_spec,
    ‚Üê embedding_conj (zeta_spec p ‚Ñö K)]
  -- The goal is: ‚ÄñœÜ (u)‚Äñ * ‚Äñ(starRingEnd ‚ÑÇ (œÜ (u)))‚Åª¬π‚Äñ = 1
  -- We need to use the fact that ‚Äñconj z‚Äñ = ‚Äñz‚Äñ and ‚Äñz‚Åª¬π‚Äñ = ‚Äñz‚Äñ‚Åª¬π
  have h1 : ‚Äñ(starRingEnd ‚ÑÇ (œÜ (u : K)))‚Åª¬π‚Äñ = ‚ÄñœÜ (u : K)‚Äñ‚Åª¬π := by
    -- starRingEnd ‚ÑÇ is the conjugation, so we have conj(conj(œÜ u))‚Åª¬π = (conj(œÜ u))‚Åª¬π
    -- Since conj(conj(z)) = z, we have œÜ(u)‚Åª¬π, and then ‚ÄñœÜ(u)‚Åª¬π‚Äñ = ‚ÄñœÜ(u)‚Äñ‚Åª¬π
    rw [‚Üê map_inv‚ÇÄ, Complex.norm_conj, norm_inv]
  rw [h1, mul_inv_eq_one‚ÇÄ]
  intro h
  simp at h
